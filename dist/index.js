#!/usr/bin/env node
"use strict";var V=Object.create;var v=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,K=Object.prototype.hasOwnProperty;var L=(t,e,n,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of X(e))!K.call(t,s)&&s!==n&&v(t,s,{get:()=>e[s],enumerable:!(i=W(e,s))||i.enumerable});return t};var a=(t,e,n)=>(n=t!=null?V(q(t)):{},L(e||!t||!t.__esModule?v(n,"default",{value:t,enumerable:!0}):n,t));var N=require("commander"),Y=require("fs");var l=a(require("ora")),g=a(require("path")),r=a(require("chalk")),y=a(require("boxen"));var c=a(require("execa")),C=a(require("path")),R=a(require("rimraf"));function Q(t){try{return c.default.commandSync("git rev-parse --is-inside-work-tree",{stdio:"ignore",cwd:t}),!0}catch{}return!1}function Z(t){try{return c.default.commandSync("hg --cwd . root",{stdio:"ignore",cwd:t}),!0}catch{}return!1}function _(t,e){let n=!1;try{c.default.commandSync("git --version",{stdio:"ignore",cwd:t})}catch{return"git-not-found"}if(Q(t)||Z(t))return"already-in-repository";try{c.default.commandSync("git init",{stdio:"ignore",cwd:t})}catch{return"git-init-failed"}n=!0;try{c.default.commandSync("git checkout -b main",{stdio:"ignore",cwd:t}),c.default.commandSync("git add -A",{stdio:"ignore",cwd:t}),c.default.sync("git",["commit",`--message="${e}"`],{stdio:"ignore",cwd:t})}catch{if(n)try{R.default.sync(C.default.join(t,".git"))}catch{}return"git-commit-failed"}return"success"}var w=a(require("fs"));async function A(t,e={recursive:!0}){try{return w.default.existsSync(t)?"already":(await w.default.promises.mkdir(t,e),"success")}catch{return"failed"}}var P=a(require("got"));async function tt(t){return(await P.default.head(t).catch(n=>n)).statusCode===200}async function F({organization:t,repository:e,example:n,branch:i}){return tt(`https://api.github.com/repos/${t}/${e}/contents/examples/${encodeURIComponent(n)}?ref=${i}`)}var O=a(require("got")),j=a(require("tar")),T=require("stream"),E=require("util"),z=require("path"),u=require("fs"),et=(0,E.promisify)(T.Stream.pipeline),rt=".uhuu-example.temp";async function it(t){let e=(0,z.join)(process.cwd(),`${rt}-${Date.now()}`);try{return await et(O.default.stream(t),(0,u.createWriteStream)(e)),e}catch{try{await u.promises.unlink(e)}catch{}return}}async function D({root:t,name:e,branch:n,repo:i,org:s}){let p=await it(`https://codeload.github.com/${s}/${i}/tar.gz/${n}`);if(!p)return"download-failed";try{await j.default.x({file:p,cwd:t,strip:3,filter:o=>!!o.includes(`${i}-${n}/examples/${e}/`)})}catch{try{await u.promises.unlink(p)}catch{}return"extract-failed"}try{await u.promises.unlink(p)}catch{}return"success"}var H=a(require("execa")),U=a(require("which-pm-runs"));function x(){try{let{name:t}=(0,U.default)()||{};return t??"npm"}catch{return"npm"}}async function B(t){try{return await(0,H.default)(x(),["install"],{cwd:t,stdio:"ignore"}),!0}catch{return!1}}var b="uhuuio",$="uhuu-starter",S="main";var nt=async(t,e)=>{let n=x();typeof t!="string"&&((0,l.default)("You must specify an example name").fail(),console.log((0,y.default)([r.default`You can find {bold uhuu} examples at:`,"",r.default`{dim.cyan github.com/}{cyan uhuuio/uhuu-starter/tree/master/examples}`].join(`
`),{title:r.default`No example provided`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let i=g.default.resolve(e||t),s=(0,l.default)("Checking if example exists in uhuu").start();await F({organization:b,repository:$,example:t,branch:S})?s.succeed("Example found in uhuu repository"):(s.fail(`Could not locate an example named ${r.default.red(`"${t}"`)}`),console.log((0,y.default)([r.default`You can find {bold uhuu} examples at:`,"",r.default`{dim.cyan github.com/}{cyan uhuuio/uhuu-starter/tree/master/examples}`].join(`
`),{title:r.default`Example not found`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let o=i.includes(g.default.resolve(process.cwd()))?i.replace(g.default.resolve(process.cwd()),"."):i,f=(0,l.default)(`Creating directory ${r.default.cyan(o)}.`).start(),k=await A(i);k==="already"?f.warn(`Directory ${r.default.cyan(o)} already exists. Files will be overwritten.`):k==="failed"?(f.fail(`Failed to create directory ${r.default.cyan(o)}.`),process.exit(1)):f.succeed(`Directory ${r.default.cyan(o)} created.`);let h=(0,l.default)(`Downloading files for example ${r.default.cyan(t)}. This might take a moment.`).start(),I=await D({root:i,name:t,branch:S,repo:$,org:b});I==="download-failed"&&(h.fail(`Failed to download files for example ${r.default.cyan(t)}.`),process.exit(1)),I==="extract-failed"&&(h.fail(`Failed to extract files for example ${r.default.cyan(t)}.`),process.exit(1)),h.succeed(`Files downloaded and extracted for example ${r.default.cyan(t)}.`);let G=(0,l.default)("Installing packages. This might take a couple of minutes.").start();await B(i)?G.succeed("Packages installed successfully."):G.fail("Failed to install packages. You can try again manually.");let d=(0,l.default)(`Initializing Git in ${r.default.cyan(o)}.`).start(),m=_(i,"Initial commit from Create uhuu App");m==="git-not-found"&&d.warn("Git was not found in your PATH. Skipping Git initialization."),m==="already-in-repository"&&d.warn(`Directory ${r.default.cyan(o)} is already a Git repository. Skipping Git initialization.`),m==="git-init-failed"&&d.warn(`Failed to initialize Git repository in ${r.default.cyan(o)}.`),m==="git-commit-failed"&&d.warn(`Failed to commit initial commit to Git repository in ${r.default.cyan(o)}.`),m==="success"&&d.succeed("Created Git repository with initial commit.");let J=n==="yarn"?"":"run ";console.log((0,y.default)([r.default`Created {cyan ${t}} at {cyan ${o}}`,"",r.default`Start using your new {bold uhuu} template example by running:`,"",r.default`  {bold cd} {cyan ${o}}`,r.default`  {bold ${n} ${J}}{cyan uhuu}`].join(`
`),{title:r.default`{bold.green Success!}`,titleAlignment:"center",borderStyle:"round",padding:1,float:"center",margin:1,borderColor:"gray"}))},M=nt;var ot=()=>{let t=JSON.parse((0,Y.readFileSync)(`${__dirname}/../package.json`,"utf8")),e=new N.Command;e.version(t.version,"-v, --version","Output the current version.").usage("<command> [options]").helpOption("-h, --help","Output usage information.").option("-s, --source <source-path>","specify a custom source of plugins").option("-b, --branch <source-git-branch>","specify a custom branch in source of plugins").option("-o, --preset <preset-name>","specify a preset to use for the project").option("-l, --lucky","use this option to generate a project with random answers").option("-e, --example <example> [destination]","get a clone of an example from the uhuu-starter repository").option("-d, --download <download>","specify a download type (zip | git) of source","zip").option("-p, --project <project-name>","specify a project type to use").option("--disable-telemetry","disable telemetry data collection").allowUnknownOption(!0).allowExcessArguments(!0).action(async(n,i)=>{try{if(i.getOptionValue("example")){M(i.getOptionValue("example"),i.args[0]);return}}catch{}}),e.parse(process.argv)};ot();
